generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int         @id @default(autoincrement())
  email     String      @unique
  password  String
  groupId   Int?
  createdAt DateTime    @default(now()) @db.DateTime(0)
  updatedAt DateTime    @updatedAt @db.DateTime(0)
  phone     String?
  gender    String      @default("INDEFINIDO")
  name      String
  Jwts      Jwt[]
  LinkReset LinkReset[]

  Groups Group?  @relation(fields: [groupId], references: [id], onDelete: SetNull)
  Doctor Doctor?
  Nurse  Nurse?
  Adm    Adm[]
}

model Jwt {
  id        Int      @id @default(autoincrement())
  token     String   @unique @db.VarChar(255)
  expire    DateTime @db.DateTime(0)
  idUser    Int      @unique
  createdAt DateTime @default(now()) @db.DateTime(0)
  updatedAt DateTime @updatedAt @db.DateTime(0)

  User User @relation(fields: [idUser], references: [id], onDelete: Cascade)

  @@index([idUser])
}

model Group {
  id        Int      @id @default(autoincrement())
  name      String   @unique @db.VarChar(255)
  createdAt DateTime @default(now()) @db.DateTime(0)
  updatedAt DateTime @updatedAt @db.DateTime(0)

  groupPermission GroupPermission[]
  User            User[]
}

model Permission {
  id   Int    @id @default(autoincrement())
  name String

  createdAt DateTime @default(now()) @db.DateTime(0)
  updatedAt DateTime @updatedAt @db.DateTime(0)

  groupPermission GroupPermission[]
}

model GroupPermission {
  group        Group      @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  groupId      Int
  permission   Permission @relation(fields: [groupId], references: [id], onDelete: Cascade)
  permissionId Int

  createdAt DateTime @default(now()) @db.DateTime(0)
  updatedAt DateTime @updatedAt @db.DateTime(0)

  @@id([groupId, permissionId])
}

model LinkReset {
  id     Int      @id @default(autoincrement())
  link   String   @db.VarChar(255)
  expire DateTime @db.DateTime(0)
  idUser Int

  createdAt DateTime @default(now()) @db.DateTime(0)
  updatedAt DateTime @updatedAt @db.DateTime(0)

  User User @relation(fields: [idUser], references: [id], onDelete: Cascade)
}

model Patient {
  id                  Int            @id @default(autoincrement())
  name                String
  lastName            String
  gender              String         @default("INDEFINIDO")
  addressNumber       Int?
  cep                 String?
  birthday            DateTime       @db.Date
  phone               String?
  healthInsurance     String?
  healthInsuranceCode String?
  cpf                 String         @unique
  rg                  String         @unique
  MedicalRecord       MedicalRecord?
}

model Doctor {
  crm    String  @unique
  area   String
  active Boolean @default(true)
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int     @unique

  MedicalPrescriber MedicalPrescription[] @relation("medicalPrescriber")
}

model Adm {
  active Boolean @default(true)
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int     @unique
}

model MedicalPrescription {
  id                     Int      @id @default(autoincrement())
  drug                   String
  drugDosage             String
  drugWay                String
  administrationInterval String
  prescriptionDate       DateTime @default(now())

  realized      Boolean   @default(false)
  obs           String?
  executionDate DateTime?

  MedicalRecord   MedicalRecord @relation(fields: [medicalRecordId], references: [id])
  medicalRecordId Int
  Prescriber      Doctor        @relation("medicalPrescriber", fields: [prescriberId], references: [userId])
  prescriberId    Int
  Executor        Nurse?        @relation("nurseExecutorMedical", fields: [executorId], references: [userId])
  executorId      Int?
  NurseReport     NurseReport?
}

model MedicalRecord {
  id                  Int                   @id @default(autoincrement())
  patient             Patient               @relation(fields: [patientId], references: [id])
  patientId           Int                   @unique
  nursePrescription   NursePrescription[]
  MedicalPrescription MedicalPrescription[]
  NurseReport         NurseReport[]
}

model Nurse {
  coren       String        @unique
  active      Boolean       @default(true)
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int           @unique
  NurseReport NurseReport[]

  NursePrescriber      NursePrescription[]   @relation("nursePrescriber")
  NurseExecutor        NursePrescription[]   @relation("nurseExecutor")
  NurseExecutorMedical MedicalPrescription[] @relation("nurseExecutorMedical")
}

model NursePrescription {
  id               Int           @id @default(autoincrement())
  prescription     String
  prescriptionDate DateTime      @default(now())
  realized         Boolean       @default(false)
  obs              String?
  executionDate    DateTime?
  MedicalRecord    MedicalRecord @relation(fields: [medicalRecordId], references: [id])
  medicalRecordId  Int
  Prescriber       Nurse         @relation("nursePrescriber", fields: [prescriberId], references: [userId])
  prescriberId     Int
  Executor         Nurse?        @relation("nurseExecutor", fields: [executorId], references: [userId])
  executorId       Int?
  NurseReport      NurseReport?
}

model NurseReport {
  id                    Int                  @id @default(autoincrement())
  reportDate            DateTime             @default(now())
  report                String
  signatory             Nurse                @relation(fields: [signatoryId], references: [userId])
  signatoryId           Int
  MedicalRecord         MedicalRecord        @relation(fields: [medicalRecordId], references: [id])
  medicalRecordId       Int
  MedicalPrescription   MedicalPrescription? @relation(fields: [medicalPrescriptionId], references: [id])
  medicalPrescriptionId Int?                 @unique
  NursePrescription     NursePrescription?   @relation(fields: [nursePrescriptionId], references: [id])
  nursePrescriptionId   Int?                 @unique
}
