generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int                 @id @default(autoincrement())
  email      String              @unique
  password   String
  groupId    Int?
  createdAt  DateTime            @default(now()) @db.DateTime(0)
  updatedAt  DateTime            @updatedAt @db.DateTime(0)
  Jwts       Jwt[]
  LinkReset  LinkReset[]
  prescriber NursePrescription[] @relation("prescriber")
  executor   NursePrescription[] @relation("executor")

  Groups Group? @relation(fields: [groupId], references: [id], onDelete: SetNull)
}

model Jwt {
  id        Int      @id @default(autoincrement())
  token     String   @unique @db.VarChar(255)
  expire    DateTime @db.DateTime(0)
  idUser    Int      @unique
  createdAt DateTime @default(now()) @db.DateTime(0)
  updatedAt DateTime @updatedAt @db.DateTime(0)

  User User @relation(fields: [idUser], references: [id], onDelete: Cascade)

  @@index([idUser])
}

model Group {
  id        Int      @id @default(autoincrement())
  name      String   @unique @db.VarChar(255)
  createdAt DateTime @default(now()) @db.DateTime(0)
  updatedAt DateTime @updatedAt @db.DateTime(0)

  groupPermission GroupPermission[]
  User            User[]
}

model Permission {
  id   Int    @id @default(autoincrement())
  name String

  createdAt DateTime @default(now()) @db.DateTime(0)
  updatedAt DateTime @updatedAt @db.DateTime(0)

  groupPermission GroupPermission[]
}

model GroupPermission {
  group        Group      @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  groupId      Int
  permission   Permission @relation(fields: [groupId], references: [id], onDelete: Cascade)
  permissionId Int

  createdAt DateTime @default(now()) @db.DateTime(0)
  updatedAt DateTime @updatedAt @db.DateTime(0)

  @@id([groupId, permissionId])
}

model LinkReset {
  id     Int      @id @default(autoincrement())
  link   String   @db.VarChar(255)
  expire DateTime @db.DateTime(0)
  idUser Int

  createdAt DateTime @default(now()) @db.DateTime(0)
  updatedAt DateTime @updatedAt @db.DateTime(0)

  User User @relation(fields: [idUser], references: [id], onDelete: Cascade)
}

model Patient {
  id                  Int            @id @default(autoincrement())
  name                String
  lastName            String
  addressNumber       Int?
  cep                 String?
  birthday            DateTime       @db.Date
  phone               String?
  healthInsurance     String?
  healthInsuranceCode String?
  cpf                 String         @unique
  rg                  String         @unique
  MedicalRecord       MedicalRecord?
}

model MedicalRecord {
  id                Int                 @id @default(autoincrement())
  patient           Patient             @relation(fields: [patientId], references: [id])
  patientId         Int
  nursePrescription NursePrescription[]
}

model NursePrescription {
  id               Int           @id @default(autoincrement())
  prescription     String
  prescriptionDate DateTime      @default(now())
  realized         Boolean       @default(false)
  obs              String
  executionDate    DateTime?
  MedicalRecord    MedicalRecord @relation(fields: [medicalRecordId], references: [id])
  medicalRecordId  Int
  Prescriber       User          @relation("prescriber", fields: [prescriberId], references: [id])
  prescriberId     Int
  Executor         User          @relation("executor", fields: [executorId], references: [id])
  executorId       Int
}
